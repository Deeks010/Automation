from crewai import Task
from agents import input_processing_agent,ai_generated_content_detection_agent,web_based_plagiarism_detection_agent,document_similarity_agent,source_attribution_agent,report_generation_agent

input_processing_task = Task(
    description=(
        "Accept and preprocess input text {topic} to prepare it for further analysis. "
        "Tasks include text cleaning (removing whitespace and special characters), "
        "tokenization (breaking text into words or phrases), and language detection."
    ),
    expected_output=(
        "Processed text ready for AI-generated content detection, web-based plagiarism detection, "
        "document similarity analysis, source attribution, and report generation."
    ),
    agent=input_processing_agent,
)

ai_generated_content_detection_task = Task(
    description=(
        "Identify whether the {topic} is generated by AI. "
        "Tasks include utilizing models like GPTZero, OpenAI's AI-generated text detectors, "
        "or custom classifiers, and analyzing linguistic patterns typical of AI generation."
    ),
    expected_output=(
        "Detection of AI-generated text with insights into linguistic patterns and characteristics."
    ),
    agent=ai_generated_content_detection_agent,
)

web_based_plagiarism_detection_task = Task(
    description=(
        "Check if the {topic} matches content available on the internet. "
        "Tasks include search snippet extraction, query generation, web scraping, and content comparison."
    ),
    expected_output=(
        "Identification of plagiarized content with links or references to sources and similarity measures."
    ),
    agent=web_based_plagiarism_detection_agent,
)

document_similarity_task = Task(
    description=(
        "Compare the {topic} structure and style of documents. "
        "Tasks include structure analysis (headings, paragraphs, lists) and stylometric analysis."
    ),
    expected_output=(
        "Analysis of document similarities based on structural elements and writing styles."
    ),
    agent=document_similarity_agent,
)

source_attribution_task = Task(
    description=(
        "Identify whether the {topic} is likely source of plagiarized content. "
        "Tasks include source analysis to list potential sources and provide links or references."
    ),
    expected_output=(
        "Accurate attribution of plagiarized content to its original sources with relevant references."
    ),
    agent=source_attribution_agent,
)

report_generation_task = Task(
    description=(
        "Generate a comprehensive plagiarism report for the given {topic}. "
        "Tasks include summary creation (percentage of plagiarized content, sources, AI detection results), "
        "visualization (highlighting similarities and sources), and recommendations."
    ),
    expected_output=(
        "A detailed plagiarism report summarizing findings, visualizing similarities, and providing actionable recommendations."
    ),
    agent=report_generation_agent,
)
